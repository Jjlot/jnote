#+TITLE: Python
#+STARTUP: showall

* How to use python logging
#+BEGIN_SRC python
import logging

logging.basicConfig(filename='logger.log', encoding='utf-8')

# getLogger前要先basicConfig
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')

logging.debug('This is a debug message')

logging.info('This is an info message')

logging.warning('This is a warning message')

logging.error('This is an error message')

logging.critical('This is a critical message')

logger = logging.getLogger('example_logger')

logger.warning('%s before you %s', 'Look', 'leap!')

LOG = logging.getLogger(__name__)

LOG.info('In log')
#+END_SRC

** 捕获traceback
#+begin_src python :results output
try:
    1/0
except Exception:
    logging.error("Something error", exc_info=True)
#+end_src

** python 日志 logging模块(详细解析)
https://blog.csdn.net/pansaky/article/details/90710751

** Python之日志处理（logging模块）
https://www.cnblogs.com/yyds/p/6901864.html

** Python之向日志输出中添加上下文信息
https://www.cnblogs.com/yyds/p/6897964.html

* How to use syslog
#+BEGIN_SRC python
import syslog

syslog.syslog('String test')
#+END_SRC

* Time duration
** The simple way
#+BEGIN_SRC python
import datetime

start = datetime.datetime.now()
# Some process
end = datetime.datetime.now()

duration = end - start
print(' ----->time result: start at %s, end at %s, duration %s\n', str(start), str(end), str(duration))
#+END_SRC

** Decorator based
#+begin_src python :results output
from time import time

def timeit(f):

    def timed(*args, **kw):

        ts = time()
        result = f(*args, **kw)
        te = time()

        print('func:%r args:[%r, %r] took: %2.4f sec' % (f.__name__, args, kw, te-ts))
        return result

    return timed

@timeit
def foo():
    print('hi')
#+end_src

** Class-based Context Manager
#+begin_src python :results output
from time import time

class Timer(object):
    def __init__(self, description):
        self.description = description

    def __enter__(self):
        self.start = time()

    def __exit__(self, type, value, traceback):
        self.end = time()
        print('%s: %s' % (self.description, self.end - self.start))


with Timer("List Comprehension Example"):
    s = [x for x in range(10000000)]
#+end_src

* Pretty table
** Sample
#+begin_src python :results output
from prettytable import PrettyTable

x = PrettyTable()

x.field_names = ["City name", "Area", "Population", "Annual Rainfall"]
x.add_row(["Adelaide", 1295, 1158259, 600.5])
x.add_row(["Brisbane", 5905, 1857594, 1146.4])

print(x)
#+end_src

* click
